{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to AP Computer Science!","text":"<p>AP Computer Science A (APCS)</p> <p>Marlborough School, Los Angeles</p> <p>2025-26</p> <p>Dr. Kessner<p>"},{"location":"info/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"info/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"info/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"class/course_expectations/","title":"Course Expectations","text":""},{"location":"class/course_expectations/#assignments-and-grading","title":"Assignments and Grading","text":"<p>You will be given a coding assignment every week.</p> <p>Each coding assignment has an associated quiz.  You can retake any quiz as many times as you like (subject to the 70%/30% retake weighting).  However, in order to retake a quiz, you must first write up the code from your original quiz, make sure it runs correctly, and get my approval to retake the quiz.</p> <p>You will also have at least one larger coding project, which you will present at STEM + Arts Galleries and/or the Celebration of Innovation.  You will start on your project toward the end of the first semester.</p>"},{"location":"class/course_expectations/#weekly-schedule","title":"Weekly schedule","text":"<p>Once we get into the school year, a typical week will look like:</p> <ul> <li> <p>1st class: Code demo for new unit, discussion and work period</p> </li> <li> <p>2nd/3rd class: Work period (coding, quizzes)</p> </li> </ul>"},{"location":"class/course_expectations/#time-commitment","title":"Time commitment","text":"<ul> <li> <p>Put time in your schedule to write code every day.  You should aim   for 7 hours/week.  I will be giving you as much time as possible   during class to write code, ~1-2 hours/week.</p> </li> <li> <p>Your goal as you approach the week's exercises is to be able to do   each exercise without hesitation, within (roughly) 5 minutes.  For   some exercises, the first time you do it might take 20-30 minutes.   Or you might get stuck and need to look at a solution or ask a friend   about it.  It is your responsibility revisit the exercise later to   make sure you can solve it on your own without hesitation.</p> </li> <li> <p>You should not need to \"study\" for the quizzes.  The quizzes are   meant to assess whether you have absorbed the new concepts and can   solve new but similar problems.   If you can do each homework   exercise without hesitation, you will be able to handle the quiz   problems.</p> </li> <li> <p>There are no tests or midterm/final exam in this course, so no week   will be any more difficult or stressful than any other.  Instead, so   you should be putting in a strong, sustained effort every week.</p> </li> <li> <p>Use the in-class work periods effectively!  It is easy to get   stuck on a problem.  The fastest way to get unstuck is to talk to   your classmates (or me).  After you've done the exercises, help your   classmates!  Talking about problems and explaining solutions is a   great way to solidify your own knowledge.  We're all here to learn   together.</p> </li> </ul>"},{"location":"class/course_expectations/#use-of-artificial-intelligence-ai","title":"Use of Artificial Intelligence (AI)","text":"<p>Recent advances in AI have resulted in great improvements in AI-based code assistants.  AI-generated code may look correct, but also may have subtle bugs.  Remember that your goal in this course is for you to improve your coding skills.</p>"},{"location":"class/course_expectations/#coding-assignments","title":"Coding Assignments","text":"<p>I expect that any code you submit for an assignment has been written by you, using your own brain and fingers.</p> <p>The coding assignments are for you to practice your skills, and to practice solving problems.  Your goal is to be able to solve a similar problem without help.  Ideally, you will give yourself time to struggle with the solution, ask classmates, or ask me if you are stuck.  </p> <p>On the other hand, AI code assistants can be helpful to help you get unstuck, including finding potential bugs in your code.</p> <p>You are allowed to use AI for help, but think of it as a crutch: it's a tool to help you keep moving until you are up and running on your own again.</p>"},{"location":"class/course_expectations/#quizzes","title":"Quizzes","text":"<p>You will write your quizzes by hand on paper.  No AI. Real intelligence only.</p>"},{"location":"class/course_expectations/#projects","title":"Project(s)","text":"<p>If you feel that AI will help your project, you are welcome to use it, subject to the following:</p> <ul> <li> <p>You must fully document any use of AI code generation.  You may   not take credit for code that you did not write.</p> </li> <li> <p>You are responsible for getting your program to run, including   debugging all issues.  Remember that debugging your own code is   difficult enough.  Debugging AI-generated code can be even more   difficult.</p> </li> <li> <p>If you use a 3rd party web service:</p> <ul> <li>Be sure not to submit any identifying information</li> <li>Abide by the service's license agreement</li> <li>Abide by Marlborough's Student Technology Responsible Use Policy</li> </ul> </li> </ul>"},{"location":"class/intro/","title":"Introduction","text":"<p>We are going to learn how to program in Java, a programming language that has been in use by software developers for over 20 years. </p> <p>Object-oriented programming (OOP) is the dominant programming paradigm for creating maintainable large-scale software systems (everything from video games to entire operating systems).  OOP allows the programmer to break up a large piece of software into modular pieces, each of which can be developed independently of the others.  </p> <p>Java is part of the C/C++ family of languages, and its syntax reflects this ancestry.  Java was designed from the ground up to be object-oriented.</p> <p>In this course, we will learn many of the major features of the Java language. These features (or something equivalent) can be found in all major programming languages in use today (e.g.  C, C++, Python, Javascript), making it significantly easier to learn a second language.  We will begin writing simple text-based programs that run from the command line, as is typically done when learning Java.  However, we will also use the Processing software libraries to write Java programs with animated graphics and user interaction.</p> <p>By the end of this course, you will be prepared to take the AP Computer Science A exam, as well as to move on to more in-depth studies of theoretical computer science and/or practical software development.</p> <p>Let's code!</p> <p>Dr. Kessner</p>"},{"location":"class/resources/","title":"Resources","text":""},{"location":"class/resources/#textbooks","title":"Textbooks","text":"<p>We will be using various online resources for the class:</p> <ul> <li>David J Eck, Introduction to Programming Using Java, Seventh Edition</li> <li>Wikibooks Java Programming</li> <li>CodingBat code practice</li> </ul> <p>We will also be using Barron's AP Study Guide for AP exam practice problems.</p>"},{"location":"class/resources/#software","title":"Software","text":"<p>You will need to install some software (e.g. a Java compiler and a text editor).  All the software we will be using is free and open source.</p>"},{"location":"class/schedule/","title":"Schedule 2024-25","text":"<p>Note: this is last year's schedule.</p>"},{"location":"class/schedule/#semester-1","title":"Semester 1","text":"<p>16 weeks, 34 class meetings</p> Week Date # Topics 1 Aug 26 2 Introductions, Installation; Command line, dev environment setup, Summer projects 2 Sep 3 2 Unit 0 (Command line, numeric conversion) 3 Sep 9 2 Unit 1 (Java Basics) 4 Sep 16 3 Unit 2 (Functions and Conditionals) 5 Sep 23 2 Unit 3 (String, Math, Random) 6 Sep 30 1 catch up 7 Oct 7 2 Unit 4 (Loops / Algorithms) 8 Oct 14 2 Unit 5 (Classes &amp; Objects) 9 Oct 21 3 catch up 10 Oct 28 2 Unit 6 (Processing libraries); Project planning 11 Nov 4 2 Unit 7 (Arrays); Project work 12 Nov 11 2 Unit 8 (ArrayList); Project work 13 Nov 18 2 catch up, Project work -- Nov 25 - Thanksgiving Break 14 Dec 2 3 Unit 9 (Array Algorithms); Project work 15 Dec 9 2 Project work 16 Dec 16 2 Project work"},{"location":"class/schedule/#semester-2","title":"Semester 2","text":"<p>18 weeks, 39 class meetings</p> Week Date # Topics 1 Jan 6 2 no school 2 Jan 13 2 Unit 10 (Lists of Objects) 3 Jan 20 2 Unit 11 (Inheritance and Interfaces) 4 Jan 27 2 Demos: Transformations, Scene classes, Text IO 5 Feb 3 2 Unit 12 (2D arrays) 6 Feb 10 2 Application: Image processing 7 Feb 17 2 Unit 13 (Interacting Classes) 8 Feb 24 2 Application: Particle generators 9 Mar 3 2 AP exam MC practice, catch up 10 Mar 10 3 Unit 14 (Algorithm analysis) 11 Mar 17 2 Unit 15 (Recursion) -- Mar 24 - Spring Break -- Mar 31 - Spring Break 12 Apr 7 2 Project work, AP exam prep 13 Apr 14 2 Project work, AP exam prep 14 Apr 21 3 Project work, AP exam prep 15 Apr 28 2 AP exam prep, Celebration of Innovation Thu May 1, 5-9pm 16 May 5 2 AP Exam Wed May 7, 12pm 17 May 12 2 TBD 18 May 19 3 TBD 19 May 26 1 No more APCS :("},{"location":"class/study_advice/","title":"Study Advice","text":"<p>Hello APCS coders!</p> <p>I would like to offer some advice about how to use your time effectively to master the concepts we cover this year.  </p>"},{"location":"class/study_advice/#mistakes","title":"Mistakes","text":"<p>Niels Bohr, a physicist, gave this definition of an expert:</p> <p>An expert is a man who has made all the mistakes which can be made, in a narrow field.</p> <p>Of course, not all experts are men, and no person can make all the mistakes there are to make, so here's my updated definition:</p> <p>An expert is someone who has made more mistakes in a particular subject than anyone else.</p> <p>You can interpret this in two ways:</p> <ul> <li> <p>In order to become an expert, you must make more mistakes than anyone else.</p> </li> <li> <p>The only difference between you and an expert is that they have made more   mistakes than you have.  (So you shouldn't be intimidated by an expert.)</p> </li> </ul>"},{"location":"class/study_advice/#learning-through-play","title":"Learning through play","text":"<p>Babies (human or other animal) use play as a way of learning about the world. For example, when a baby first encounters a new object, what does she do?  She pokes at it, prods it, turns it upside down, all to explore the properties of the new object.  </p> <p>This is a great way to explore a new coding concept.  What happens if you change the value of this variable?  What happens if you change the order of these statements?  What happens if you omit a particular keyword?  A lot of learning how your code relates to the behavior of your program is playing around, poking and prodding and changing things and observing the results.</p>"},{"location":"class/study_advice/#coding","title":"Coding","text":"<ul> <li> <p>Coding is a skill.  How fast your skills improve depends on how much time and   effort you put into your practice.  You won't get better if you don't   practice.  And here, practice means \"writing and testing and debugging code\".</p> </li> <li> <p>Learning to read and write code is also like learning a foreign   language.  You must immerse yourself if possible.  A little   practice every day will give you better results than a long   practice one day a week.</p> </li> <li> <p>Give yourself space to make mistakes (and time to learn from   them).  Remember: in order to become an expert, you must make   all the mistakes that everyone else has made, and more.</p> </li> </ul> <p>Dr. Kessner</p>"},{"location":"class/syllabus/","title":"Syllabus","text":"<p>AP Computer Science A (APCS) Marlborough School, Los Angeles 2025-26 </p> <p>Dr. Kessner Free periods: CE in D215</p>"},{"location":"class/syllabus/#course-description","title":"Course Description","text":"<p>In this course we will dive deeply into object-oriented programming in the Java language.  While we explore computer science concepts using Java, these concepts are applicable to all programming languages.  In addition to building your coding skills through coding assignments, you will work on a larger software project using the Processing libraries. Along the way you will gain valuable experience testing and debugging your code.</p>"},{"location":"class/syllabus/#topics","title":"Topics","text":"<p>In this course we will dive deeply into object-oriented programming in the Java language.  We will explore many programming and computer science concepts:</p> <ul> <li>data types and variables</li> <li>functions</li> <li>conditionals</li> <li>loops and algorithms</li> <li>logical and arithmetic operators</li> <li>arrays, ArrayLists</li> <li>computer graphics and animation</li> <li>classes and objects</li> <li>2D arrays and image processing</li> <li>data analysis </li> <li>algorithm analysis</li> <li>recursion</li> </ul>"},{"location":"class/syllabus/#learning-targets-by-unit","title":"Learning Targets by Unit","text":""},{"location":"class/syllabus/#unit-0-command-line-numeric-conversion","title":"Unit 0 (Command line, numeric conversion)","text":"<ul> <li>command line<ul> <li>run commands from the Terminal command line</li> <li>understand and navigate directory structure</li> <li>understand relative vs. absolute paths</li> <li>copy, move, delete files</li> <li>edit files with a text editor</li> <li>compile and run a Java program</li> </ul> </li> <li>numeric conversion<ul> <li>understand the binary, octal, hexadecimal, and decimal number systems</li> <li>convert between decimal and other bases:<ul> <li>binary &lt;-&gt; decimal</li> <li>octal &lt;-&gt; decimal</li> <li>hexadecimal &lt;-&gt; decimal</li> </ul> </li> <li>fast conversion to/from binary:<ul> <li>binary &lt;-&gt; octal</li> <li>binary &lt;-&gt; hexadecimal</li> </ul> </li> </ul> </li> </ul>"},{"location":"class/syllabus/#unit-1-java-basics","title":"Unit 1 (Java Basics)","text":"<ul> <li>write, compile, run, and debug Java programs</li> <li>remember basic syntax from Processing<ul> <li>conditions (if statements)</li> <li>loops (for statements)</li> </ul> </li> </ul>"},{"location":"class/syllabus/#unit-2-functions-and-conditionals","title":"Unit 2 (Functions and Conditionals)","text":"<ul> <li>write functions<ul> <li>understand how to pass variables as input</li> <li>understand how to return values</li> </ul> </li> <li>write unit tests<ul> <li>write helpful output for validation and debugging</li> </ul> </li> </ul>"},{"location":"class/syllabus/#unit-3-string-math-random","title":"Unit 3 (String, Math, Random)","text":"<ul> <li>use the basic String functions</li> <li>use the Math library functions</li> <li>use the rand() function to generate:<ul> <li>random floats in any interval</li> <li>random integers in any interval</li> </ul> </li> </ul>"},{"location":"class/syllabus/#unit-4-loops-algorithms","title":"Unit 4 (Loops / Algorithms)","text":"<ul> <li>use a loop to perform computations</li> </ul>"},{"location":"class/syllabus/#unit-5-classes-objects","title":"Unit 5 (Classes &amp; Objects)","text":"<ul> <li>write a class definition</li> <li>create objects of a class</li> <li>use constructor for initialization</li> <li>declare member methods and variables</li> <li>understand public vs private access</li> <li>understand local vs member variable scope</li> </ul>"},{"location":"class/syllabus/#unit-6-processing-libraries","title":"Unit 6 (Processing libraries)","text":"<ul> <li>understand how to create a graphics program in Java using the Processing   libraries</li> <li>remember basic Processing functions for drawing</li> </ul>"},{"location":"class/syllabus/#unit-7-arrays","title":"Unit 7 (Arrays)","text":"<ul> <li>declare an array of basic types or objects</li> <li>array functions and access</li> <li>iterate over an array <ul> <li>for loop</li> <li>for-each loop</li> </ul> </li> </ul>"},{"location":"class/syllabus/#unit-8-arraylist","title":"Unit 8 (ArrayList)","text":"<ul> <li>declare an ArrayList of objects</li> <li>ArrayList functions and access</li> <li>iterate over an ArrayList<ul> <li>for loop</li> <li>for-each loop</li> </ul> </li> </ul>"},{"location":"class/syllabus/#unit-9-array-algorithms","title":"Unit 9 (Array Algorithms)","text":"<ul> <li>write functions that operate on arrays / ArrayLists<ul> <li>search / compute</li> <li>filter</li> <li>transform</li> </ul> </li> </ul>"},{"location":"class/syllabus/#unit-10-lists-of-objects","title":"Unit 10 (Lists of Objects)","text":"<ul> <li>create an array or ArrayList of objects</li> <li>adding / editing / removing objects </li> <li>iterate through a list of objects<ul> <li>for loop</li> <li>for-each loop</li> </ul> </li> </ul>"},{"location":"class/syllabus/#unit-11-inheritance-and-interfaces","title":"Unit 11 (Inheritance and Interfaces)","text":"<ul> <li>create a subclass of a class</li> <li>write an interface</li> <li>implement an interface</li> <li>operating on a list of objects of a given interface or base class</li> </ul>"},{"location":"class/syllabus/#unit-12-2d-arrays","title":"Unit 12 (2D arrays)","text":"<ul> <li>create a 2D array of base types or objects</li> <li>initialize a 2D array using a nested for loop</li> <li>iterate through a 2D array<ul> <li>for loops</li> <li>for-each loops</li> </ul> </li> </ul>"},{"location":"class/syllabus/#unit-13-interacting-classes","title":"Unit 13 (Interacting Classes)","text":"<ul> <li>write a class with member variables that are also classes</li> <li>write a class with an ArrayList as a member variable</li> </ul>"},{"location":"class/syllabus/#unit-14-algorithm-analysis","title":"Unit 14 (Algorithm analysis)","text":"<ul> <li>understand the asymptotic runtime of basic searching and sorting   algorithms<ul> <li>search<ul> <li>linear</li> <li>binary</li> </ul> </li> <li>sort<ul> <li>selection sort</li> <li>insertion sort</li> <li>bubble sort (optional)</li> <li>mergesort</li> </ul> </li> </ul> </li> </ul>"},{"location":"class/syllabus/#unit-15-recursion","title":"Unit 15 (Recursion)","text":"<ul> <li>write a recursive function</li> <li>mentally trace through the calls of a recursive function</li> </ul>"},{"location":"summer/summer_assignment/","title":"Summer Assignment 2025","text":""},{"location":"summer/summer_assignment/#overview","title":"Overview","text":"<p>Hello and welcome to AP Computer Science!  I\u2019m very excited that you\u2019ve signed up for the class!  In APCS you will continue to improve your coding skills, learn how to think about code on a deeper level, and enhance your ability to create things on your computer.</p> <p>In AP Computer Science we study object-oriented programming (OOP) in detail using the Java programming language.  Java is part of the C family of programming languages (C++, Objective C, C#), and the syntax and concepts are very similar to C/C++.  The Processing language is a simplified version of Java, with a focus on computer graphics programming.  Processing is an excellent first language for learning the basic syntax and concepts underlying Java.  In AP Computer Science we won\u2019t use Processing directly, but we will use the Processing software libraries to write graphics programs in Java.</p>"},{"location":"summer/summer_assignment/#resources-for-the-processing-language","title":"Resources for the Processing language","text":"<p>Processing official website and tutorials page: https://processing.org/ https://processing.org/tutorials/ </p> <p>ProcessingExamples page: https://dkessner.github.io/ProcessingExamples</p> <p>Learning Processing by Daniel Shiffman is a very readable (but non-free) book on the Processing language. http://learningprocessing.com</p>"},{"location":"summer/summer_assignment/#prerequisites","title":"Prerequisites","text":"<p>You should be familiar with the following concepts before starting AP Computer Science:</p> <ul> <li>variables</li> <li>functions</li> <li>conditionals (if)</li> <li>loops (for, while)</li> <li>classes and objects</li> </ul> <p>These concepts are covered in Chapters 1-8 of Learning Processing.  You don\u2019t need to be an expert in using classes and objects (Chapter 8). However, you should be able to recognize a class declaration and understand how to use objects in a program.  The summer assignment is meant to keep your skills sharp, to refresh your memory about Processing/Java syntax, and to start or continue thinking about classes and objects.</p> <p>These concepts are also illustrated in the examples on the ProcessingExamples webpage.  You should make sure that you understand all the basic examples, and especially the Object Oriented Programming examples (Classes 1/2/3).</p>"},{"location":"summer/summer_assignment/#demo-programs","title":"Demo programs","text":"<p>hello_objects.pde a demo program that illustrates how to declare a class and how to create and use objects of that class</p> <p>hello_objects_arraylist.pde a demo program that illustrates the use of <code>ArrayList</code>, which allows you to create lots of objects without using a separate variable for each one (this part is optional -- see assignment below)</p> <p>You also may want to refer to these examples from our Computer Programming classes (especially the Classes 1, 2, 3 examples):  https://dkessner.github.io/ProcessingExamples</p>"},{"location":"summer/summer_assignment/#summer-assignment","title":"Summer assignment","text":"<p>Your assignment is to write a program in Processing.  The program must be an animation with <code>setup()</code> and <code>draw()</code> functions (i.e. not just a drawing).  The program must also declare a class and use objects of that class.   Other than these two requirements, you have complete freedom to create what you want.  You will be showing your program to the class during the first week in the Fall.</p> <p>Your program could be as simple as the <code>hello_objects</code> demo, or it can be as intricate as you like -- be creative!  However, you should not be copy/pasting code from anywhere.  As you do this assignment, please keep in mind the goals of the exercise:</p> <ul> <li>Practice declaring variables, and writing conditionals, loops, and functions.</li> <li>Practice debugging code.</li> <li>Practice thinking about classes and objects.</li> </ul> <p>Optional (but highly recommended):  For an additional challenge, use an <code>ArrayList</code> to store lots of objects (for example dozens or hundreds of bouncing balls or asteroids or bugs...).  </p> <p>If you have any questions as you are working on your program, feel free to email me.  Have fun!  </p>"}]}